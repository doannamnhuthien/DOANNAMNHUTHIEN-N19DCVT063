
Bai5.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000714  08000714  00010714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000724  08000724  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000724  08000724  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000724  08000724  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000728  08000728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800072c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08000734  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000734  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002759  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000951  00000000  00000000  00022791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  000230e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  000234f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c4cd  00000000  00000000  000238a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002dc5  00000000  00000000  0002fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af6b2  00000000  00000000  00032b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  000e21e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fb4  00000000  00000000  000e22b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006fc 	.word	0x080006fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080006fc 	.word	0x080006fc

080001d4 <main>:
static void Delay(uint32_t ms);
static uint8_t ButtonRead_Status(GPIO_TypeDef * GPIOx, uint32_t GPIO_PIN);

//-----------------------------------------------------------------------------
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	AppInitCommon();
 80001d8:	f000 f81a 	bl	8000210 <AppInitCommon>

	while(1)
	{
		//Turn on the Buzzer when pressing the button--------------------------
		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_B5_PIN) == GPIO_PIN_LOW)
 80001dc:	2104      	movs	r1, #4
 80001de:	480a      	ldr	r0, [pc, #40]	; (8000208 <main+0x34>)
 80001e0:	f000 f850 	bl	8000284 <ButtonRead_Status>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d108      	bne.n	80001fc <main+0x28>
		{
			Delay(5);
 80001ea:	2005      	movs	r0, #5
 80001ec:	f000 f861 	bl	80002b2 <Delay>
			BuzzerControl_SetStatus (BUZZER_GPIO_PORT, BUZZER_PIN9, GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	2109      	movs	r1, #9
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x38>)
 80001f6:	f000 f815 	bl	8000224 <BuzzerControl_SetStatus>
 80001fa:	e7ef      	b.n	80001dc <main+0x8>
		}

		//Turn off the Buzzer when pressing the button-------------------------
		else
		{
			BuzzerControl_SetStatus (BUZZER_GPIO_PORT, BUZZER_PIN9, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2109      	movs	r1, #9
 8000200:	4802      	ldr	r0, [pc, #8]	; (800020c <main+0x38>)
 8000202:	f000 f80f 	bl	8000224 <BuzzerControl_SetStatus>
		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_B5_PIN) == GPIO_PIN_LOW)
 8000206:	e7e9      	b.n	80001dc <main+0x8>
 8000208:	40020400 	.word	0x40020400
 800020c:	40020800 	.word	0x40020800

08000210 <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	//System 84MHz-------------------------------------------------------------
	SystemCoreClockUpdate();
 8000214:	f000 f8e2 	bl	80003dc <SystemCoreClockUpdate>

	//Button Init--------------------------------------------------------------
	Button_Init();
 8000218:	f000 f88a 	bl	8000330 <Button_Init>

	//Buzzer Init--------------------------------------------------------------
	Buzzer_Init();
 800021c:	f000 f86a 	bl	80002f4 <Buzzer_Init>
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}

08000224 <BuzzerControl_SetStatus>:
 * @param  None
 * @retval None
 */
static
void BuzzerControl_SetStatus(GPIO_TypeDef * GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	70fb      	strb	r3, [r7, #3]
 8000230:	4613      	mov	r3, r2
 8000232:	70bb      	strb	r3, [r7, #2]

	//Set bit in BSRR Registers------------------------------------------------
	if (Status == GPIO_PIN_SET)
 8000234:	78bb      	ldrb	r3, [r7, #2]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d10d      	bne.n	8000256 <BuzzerControl_SetStatus+0x32>
	{
		GPIOx->BSRRL |= 1 << GPIO_PIN;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	8b1b      	ldrh	r3, [r3, #24]
 800023e:	b29b      	uxth	r3, r3
 8000240:	b21a      	sxth	r2, r3
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f303 	lsl.w	r3, r1, r3
 800024a:	b21b      	sxth	r3, r3
 800024c:	4313      	orrs	r3, r2
 800024e:	b21b      	sxth	r3, r3
 8000250:	b29a      	uxth	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	831a      	strh	r2, [r3, #24]
	}
	//Reset bit in BSRR Registers----------------------------------------------
	if (Status == GPIO_PIN_RESET)
 8000256:	78bb      	ldrb	r3, [r7, #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d10d      	bne.n	8000278 <BuzzerControl_SetStatus+0x54>
	{
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	8b5b      	ldrh	r3, [r3, #26]
 8000260:	b29b      	uxth	r3, r3
 8000262:	b21a      	sxth	r2, r3
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	2101      	movs	r1, #1
 8000268:	fa01 f303 	lsl.w	r3, r1, r3
 800026c:	b21b      	sxth	r3, r3
 800026e:	4313      	orrs	r3, r2
 8000270:	b21b      	sxth	r3, r3
 8000272:	b29a      	uxth	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	835a      	strh	r2, [r3, #26]
	}
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <ButtonRead_Status>:
 * @param  None
 * @retval None
 */
static
uint8_t ButtonRead_Status(GPIO_TypeDef * GPIOx, uint32_t GPIO_PIN)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
	uint32_t Read_Pin;

	//Read bit in IDR Registers------------------------------------------------
	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	691a      	ldr	r2, [r3, #16]
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fa22 f303 	lsr.w	r3, r2, r3
 8000298:	60fb      	str	r3, [r7, #12]
	Read_Pin = Read_Pin & 0x01;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]

	return Read_Pin;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	b2db      	uxtb	r3, r3
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <Delay>:
 * @param  None
 * @retval None
 */
static
void Delay(uint32_t ms)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for (i = 0 ; i < ms ; i ++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e00d      	b.n	80002dc <Delay+0x2a>
	{
		for (j = 0; j<5000; j++){;}
 80002c0:	2300      	movs	r3, #0
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	e002      	b.n	80002cc <Delay+0x1a>
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9f7      	bls.n	80002c6 <Delay+0x14>
	for (i = 0 ; i < ms ; i ++)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d3ed      	bcc.n	80002c0 <Delay+0xe>
	}
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <Buzzer_Init>:
 * @param  None
 * @retval None
 */
static
void Buzzer_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
	//Declare type variable GPIO Struc-----------------------------------------
	GPIO_InitTypeDef GPIO_InitStructure;

	//Enable Clock GPIOC-------------------------------------------------------
	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 80002fa:	2101      	movs	r1, #1
 80002fc:	2004      	movs	r0, #4
 80002fe:	f000 f9b9 	bl	8000674 <RCC_AHB1PeriphClockCmd>

	//Choose Pin Buzzer--------------------------------------------------------
	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8000302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000306:	603b      	str	r3, [r7, #0]

	//Choose Pin Buzzer as Out-------------------------------------------------
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000308:	2301      	movs	r3, #1
 800030a:	713b      	strb	r3, [r7, #4]

	//Choose Speed Pin---------------------------------------------------------
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800030c:	2302      	movs	r3, #2
 800030e:	717b      	strb	r3, [r7, #5]

	//Select type--------------------------------------------------------------
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000310:	2300      	movs	r3, #0
 8000312:	71bb      	strb	r3, [r7, #6]

	//Select status------------------------------------------------------------
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
 8000314:	2302      	movs	r3, #2
 8000316:	71fb      	strb	r3, [r7, #7]

	//The function initializes all of the above values-------------------------
	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8000318:	463b      	mov	r3, r7
 800031a:	4619      	mov	r1, r3
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <Buzzer_Init+0x38>)
 800031e:	f000 f91b 	bl	8000558 <GPIO_Init>
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020800 	.word	0x40020800

08000330 <Button_Init>:
 * @param  None
 * @retval None
 */
static
void Button_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
	//Declare type variable GPIO Struc-----------------------------------------
	GPIO_InitTypeDef GPIO_InitStructure ;

	//Enable Clock GPIOB-------------------------------------------------------
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 8000336:	2101      	movs	r1, #1
 8000338:	2002      	movs	r0, #2
 800033a:	f000 f99b 	bl	8000674 <RCC_AHB1PeriphClockCmd>

	//Choose Pin BUTTON--------------------------------------------------------
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 800033e:	2310      	movs	r3, #16
 8000340:	603b      	str	r3, [r7, #0]

	//Choose Pin Button as Input-----------------------------------------------
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000342:	2300      	movs	r3, #0
 8000344:	713b      	strb	r3, [r7, #4]

	//Choose Speed Pin---------------------------------------------------------
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000346:	2302      	movs	r3, #2
 8000348:	717b      	strb	r3, [r7, #5]

	//Select status------------------------------------------------------------
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 800034a:	2301      	movs	r3, #1
 800034c:	71fb      	strb	r3, [r7, #7]

	//The function initializes all of the above values-------------------------
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 800034e:	463b      	mov	r3, r7
 8000350:	4619      	mov	r1, r3
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <Button_Init+0x30>)
 8000354:	f000 f900 	bl	8000558 <GPIO_Init>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40020400 	.word	0x40020400

08000364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <NMI_Handler+0x4>

0800036a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <MemManage_Handler+0x4>

08000376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <BusFault_Handler+0x4>

0800037c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <UsageFault_Handler+0x4>

08000382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b0:	f000 f8be 	bl	8000530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SystemInit+0x20>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <SystemInit+0x20>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	2302      	movs	r3, #2
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	2302      	movs	r3, #2
 80003f4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	f003 030c 	and.w	r3, r3, #12
 80003fe:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	2b08      	cmp	r3, #8
 8000404:	d011      	beq.n	800042a <SystemCoreClockUpdate+0x4e>
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	2b08      	cmp	r3, #8
 800040a:	d844      	bhi.n	8000496 <SystemCoreClockUpdate+0xba>
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d003      	beq.n	800041a <SystemCoreClockUpdate+0x3e>
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d004      	beq.n	8000422 <SystemCoreClockUpdate+0x46>
 8000418:	e03d      	b.n	8000496 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <SystemCoreClockUpdate+0xf0>)
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <SystemCoreClockUpdate+0xf4>)
 800041e:	601a      	str	r2, [r3, #0]
      break;
 8000420:	e03d      	b.n	800049e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000422:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <SystemCoreClockUpdate+0xf0>)
 8000424:	4a2b      	ldr	r2, [pc, #172]	; (80004d4 <SystemCoreClockUpdate+0xf8>)
 8000426:	601a      	str	r2, [r3, #0]
      break;
 8000428:	e039      	b.n	800049e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800042a:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	0d9b      	lsrs	r3, r3, #22
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000436:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800043e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d00c      	beq.n	8000460 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000446:	4a23      	ldr	r2, [pc, #140]	; (80004d4 <SystemCoreClockUpdate+0xf8>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	fbb2 f3f3 	udiv	r3, r2, r3
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 8000450:	6852      	ldr	r2, [r2, #4]
 8000452:	0992      	lsrs	r2, r2, #6
 8000454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000458:	fb02 f303 	mul.w	r3, r2, r3
 800045c:	617b      	str	r3, [r7, #20]
 800045e:	e00b      	b.n	8000478 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <SystemCoreClockUpdate+0xf4>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	fbb2 f3f3 	udiv	r3, r2, r3
 8000468:	4a17      	ldr	r2, [pc, #92]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 800046a:	6852      	ldr	r2, [r2, #4]
 800046c:	0992      	lsrs	r2, r2, #6
 800046e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000472:	fb02 f303 	mul.w	r3, r2, r3
 8000476:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	0c1b      	lsrs	r3, r3, #16
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	3301      	adds	r3, #1
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000490:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <SystemCoreClockUpdate+0xf0>)
 8000492:	6013      	str	r3, [r2, #0]
      break;
 8000494:	e003      	b.n	800049e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <SystemCoreClockUpdate+0xf0>)
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <SystemCoreClockUpdate+0xf4>)
 800049a:	601a      	str	r2, [r3, #0]
      break;
 800049c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <SystemCoreClockUpdate+0xec>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	091b      	lsrs	r3, r3, #4
 80004a4:	f003 030f 	and.w	r3, r3, #15
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <SystemCoreClockUpdate+0xfc>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <SystemCoreClockUpdate+0xf0>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	fa22 f303 	lsr.w	r3, r2, r3
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <SystemCoreClockUpdate+0xf0>)
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	371c      	adds	r7, #28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40023800 	.word	0x40023800
 80004cc:	20000000 	.word	0x20000000
 80004d0:	00f42400 	.word	0x00f42400
 80004d4:	007a1200 	.word	0x007a1200
 80004d8:	08000714 	.word	0x08000714

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f8:	4c0b      	ldr	r4, [pc, #44]	; (8000528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000506:	f7ff ff57 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f000 f8d3 	bl	80006b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f7ff fe61 	bl	80001d4 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000520:	0800072c 	.word	0x0800072c
  ldr r2, =_sbss
 8000524:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000528:	20000028 	.word	0x20000028

0800052c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x20>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x24>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_IncTick+0x24>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000004 	.word	0x20000004
 8000554:	20000024 	.word	0x20000024

08000558 <GPIO_Init>:
 8000558:	b480      	push	{r7}
 800055a:	b087      	sub	sp, #28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e076      	b.n	8000662 <GPIO_Init+0x10a>
 8000574:	2201      	movs	r2, #1
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4013      	ands	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d165      	bne.n	800065c <GPIO_Init+0x104>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2103      	movs	r1, #3
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	401a      	ands	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	4619      	mov	r1, r3
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
 80005b8:	431a      	orrs	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d003      	beq.n	80005ce <GPIO_Init+0x76>
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d12e      	bne.n	800062c <GPIO_Init+0xd4>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	401a      	ands	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689a      	ldr	r2, [r3, #8]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	4619      	mov	r1, r3
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	b29b      	uxth	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	2301      	movs	r3, #1
 8000608:	408b      	lsls	r3, r1
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	7992      	ldrb	r2, [r2, #6]
 800061a:	4611      	mov	r1, r2
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	b292      	uxth	r2, r2
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	b292      	uxth	r2, r2
 8000626:	431a      	orrs	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	2103      	movs	r1, #3
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	401a      	ands	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68da      	ldr	r2, [r3, #12]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	79db      	ldrb	r3, [r3, #7]
 800064c:	4619      	mov	r1, r3
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	431a      	orrs	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d985      	bls.n	8000574 <GPIO_Init+0x1c>
 8000668:	bf00      	nop
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <RCC_AHB1PeriphClockCmd>:
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <RCC_AHB1PeriphClockCmd+0x20>
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	630b      	str	r3, [r1, #48]	; 0x30
 8000692:	e006      	b.n	80006a2 <RCC_AHB1PeriphClockCmd+0x2e>
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	43db      	mvns	r3, r3
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800069e:	4013      	ands	r3, r2
 80006a0:	630b      	str	r3, [r1, #48]	; 0x30
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <__libc_init_array>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	4d0d      	ldr	r5, [pc, #52]	; (80006ec <__libc_init_array+0x38>)
 80006b8:	4c0d      	ldr	r4, [pc, #52]	; (80006f0 <__libc_init_array+0x3c>)
 80006ba:	1b64      	subs	r4, r4, r5
 80006bc:	10a4      	asrs	r4, r4, #2
 80006be:	2600      	movs	r6, #0
 80006c0:	42a6      	cmp	r6, r4
 80006c2:	d109      	bne.n	80006d8 <__libc_init_array+0x24>
 80006c4:	4d0b      	ldr	r5, [pc, #44]	; (80006f4 <__libc_init_array+0x40>)
 80006c6:	4c0c      	ldr	r4, [pc, #48]	; (80006f8 <__libc_init_array+0x44>)
 80006c8:	f000 f818 	bl	80006fc <_init>
 80006cc:	1b64      	subs	r4, r4, r5
 80006ce:	10a4      	asrs	r4, r4, #2
 80006d0:	2600      	movs	r6, #0
 80006d2:	42a6      	cmp	r6, r4
 80006d4:	d105      	bne.n	80006e2 <__libc_init_array+0x2e>
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006dc:	4798      	blx	r3
 80006de:	3601      	adds	r6, #1
 80006e0:	e7ee      	b.n	80006c0 <__libc_init_array+0xc>
 80006e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e6:	4798      	blx	r3
 80006e8:	3601      	adds	r6, #1
 80006ea:	e7f2      	b.n	80006d2 <__libc_init_array+0x1e>
 80006ec:	08000724 	.word	0x08000724
 80006f0:	08000724 	.word	0x08000724
 80006f4:	08000724 	.word	0x08000724
 80006f8:	08000728 	.word	0x08000728

080006fc <_init>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr

08000708 <_fini>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr
